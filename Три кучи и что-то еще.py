'''
    Имеется набор данных, состоящий из троек положительных целых чисел.
Необходимо разделить числа в тройках на 3 группы,
при этом в каждую группу должно попасть ровно одно число из каждой тройки.
Группы должны удовлетворять следующим условиям:
1) Сумма чисел в первой группе нечетна
2) Сумма чисел во второй группе нечетна
Определите максимальную возможную сумму чисел в третьей группе.

ПРИМЕР:
6
8 3 4
4 8 12
9 5 6
2 6 5
12 3 5
1 2 12
Ответ для данного примера: 59
'''

with open('/home/gora/PycharmProjects/USE-2022-informat/USE-2022-informat/test_sets/27B-31.txt', 'r') as f:
    '''Идея в том, чтоб найти одну минимальную разницу, которая меняет четность групп, а также попробовать
    максимизировать ответ (жадный алгоритм), постепенно считая кол. нечетных чисел, не входящих в ответную кучу. 
    Причем добавлять все нечетные числа надо только в одну группу, а распределять их на две группы, только 
    если в тройке два нечетных числа, не входящих в ответную кучу. Затем мы смотрим на эти мета-данные,
    если кол. нечетных цифр в группах в сумме дает четное количество, то все четко, иначе, надо вычесть из суммы
    минимальную разницу - это и будет ответом'''
    dlin = int(f.readline())
    meta = [0, 0]  # кол. нечет ([0] - первая группа, [1] - вторая группа)
    ans = 0
    ps = 10000000000000000  # минимальная разница
    for i in range(dlin):
        step = list(map(int, f.readline().strip().split(' ')))
        step.sort()
        ans += step[2]
        helper = []
        if (step[2] - step[1])%2:
            helper.append(step[2] - step[1])
        if (step[2] - step[0])%2:
            helper.append(step[2] - step[0])
        if len(helper) != 0:
            helper.append(ps)
            ps = min(helper)
        helper = [ind for ind in range(2) if step[ind]%2]
        for j in range(len(helper)):
            meta[j] += 1
    print(meta)
    print(ans)
    print(ps)
